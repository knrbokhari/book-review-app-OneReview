generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Actions {
  Read
  Write
  Update
  Delete
}

model AuthUser {
  id       Int    @id @default(autoincrement())
  username String @unique
  email    String @unique
  password String // hashed password

  role       String  @default("user")
  isVerified Boolean @default(false)
  isActive   Boolean @default(true)
  isDeleted  Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique

  loginHistory LoginHistory[]
  validations  Validation[]
}

model User {
  id              Int      @id @default(autoincrement())
  username        String   @unique
  email           String   @unique
  profileImageUrl String?
  bio             String?
  favoriteGenres  String[] @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authUser  AuthUser?
  role      Roles?      @relation(fields: [role_id], references: [id])
  role_id   Int?
  Review    Review[]
  Comment   Comment[]
  Like      Like[]
  MyLibrary MyLibrary[]
}

model LoginHistory {
  id         Int      @id @default(autoincrement())
  authUserId Int
  authUser   AuthUser @relation(fields: [authUserId], references: [id])

  ipAddress String
  userAgent String
  attempt   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Validation {
  id         Int      @id @default(autoincrement())
  authUserId Int
  authUser   AuthUser @relation(fields: [authUserId], references: [id])

  code      String
  type      String
  otpExpiry DateTime? // expiry time for OTP
  isUsed    Boolean   @default(false)
  isExpired Boolean   @default(false)

  issuedAt   DateTime  @default(now())
  verifiedAt DateTime?
}

model Roles {
  id          Int           @id @default(autoincrement())
  name        String
  slug        String        @unique
  users       User[]
  permissions Permissions[]
}

model Resources {
  id          Int           @id @default(autoincrement())
  name        String
  slug        String        @unique
  permissions Permissions[]
}

model Permissions {
  role        Roles     @relation(fields: [role_id], references: [id])
  role_id     Int
  resource    Resources @relation(fields: [resource_id], references: [id])
  resource_id Int
  access      Boolean   @default(false)
  actions     Actions[]

  @@id([role_id, resource_id])
}

model Categories {
  id         Int      @id @default(autoincrement())
  name       String
  slug       String   @unique
  image      String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at String?
  product    Book[]

  @@unique([slug, id])
  @@index([id, slug])
}

model Publication {
  id                   Int      @id @default(autoincrement())
  name                 String
  image                String?
  cover_image          String?
  slug                 String   @unique
  language             String   @default("en")
  description          String?
  website              String?
  socials              Json?
  products_count       Int      @default(0)
  translated_languages String[]
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt
  product              Book[]

  @@unique([slug, id])
  @@index([id, slug])
}

model Authors {
  id             Int      @id @default(autoincrement())
  name           String
  image          String?
  cover_image    String?
  slug           String   @unique
  bio            String?
  quote          String?
  born           String?
  death          String?
  products_count Int      @default(0)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  books          Book[]

  @@unique([slug, id])
  @@index([id, slug, name])
}

model Book {
  id              Int          @id @default(autoincrement())
  name            String
  subtitle        String?
  slug            String       @unique
  book_type       String?
  author          Authors?     @relation(fields: [authorId], references: [id])
  authorId        Int?
  publication     Publication? @relation(fields: [publicationId], references: [id])
  publicationId   Int?
  status          String?      @default("draft")
  tags            String[]
  page            Int?
  isbn            String?
  viewWeight      Float?       @default(0)
  publicationDate DateTime?
  language        String       @default("English")
  country         String?
  currentEdition  String?
  price           Float?
  categories      Categories[]
  summary         String?
  description     String?
  image           String?
  gallery         String[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  deletedAt       DateTime?
  ratings         Float        @default(0)
  totalReviews    Int          @default(0)
  reviews         Review[]     @relation("BookReviews")
  MyLibrary       MyLibrary[]

  @@index([id, slug, price, status, createdAt])
  @@map("Products")
}

model Review {
  id       Int       @id @default(autoincrement())
  userId   Int
  user     User      @relation(fields: [userId], references: [id])
  bookId   Int
  book     Book      @relation("BookReviews", fields: [bookId], references: [id])
  rating   Int       @default(5)
  title    String
  content  String
  isPublic Boolean   @default(true)
  likes    Like[]
  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, bookId])
}

model Comment {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id])

  reviewId Int?
  review   Review? @relation(fields: [reviewId], references: [id])

  parentId Int?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")

  content String
  likes   Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  reviewId  Int?
  review    Review?  @relation(fields: [reviewId], references: [id])
  commentId Int?
  comment   Comment? @relation(fields: [commentId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, reviewId, commentId])
}

model MyLibrary {
  id       Int     @id @default(autoincrement())
  userId   Int
  user     User    @relation(fields: [userId], references: [id])
  bookId   Int
  book     Book    @relation(fields: [bookId], references: [id])
  status   String  @default("reading") // reading, completed, want to read
  progress Int     @default(0) // percentage of book read
  rating   Int? // user rating for the book
  review   String? // user review for the book

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, bookId])
}
